datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  ONLINE
  Invisible
  IDLE
  DND
}

model User {
  id             BigInt             @id
  username       String             @unique
  globalname     String?
  email          String?            @unique
  phone          String?            @unique
  password       String
  avatar         String?
  birthdate      DateTime?
  isOnline       Boolean?           @default(false)
  isBot          Boolean            @default(false)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  // relations
  presence       Presence?
  statusRecord   UserStatusRecord?

  sentMessages     Message[]          @relation("SentMessages")
  receivedMessages Message[]          @relation("ReceivedMessages")
  friendships1     Friendship[]       @relation("UserFriend1")
  friendships2     Friendship[]       @relation("UserFriend2")
  conversations    ConversationUser[]
  messageReceipts  MessageReceipt[]
  sourceRelations  UserRelation[]     @relation("SourceUser")
  targetRelations  UserRelation[]     @relation("TargetUser")

  @@index([username])
}

model Presence {
  id          BigInt      @id
  userId      BigInt      @unique
  user        User        @relation(fields: [userId], references: [id])
  status      UserStatus?
  expiresAt   DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model UserStatusRecord {
  id           BigInt      @id
  userId       BigInt      @unique
  user         User        @relation(fields: [userId], references: [id])
  text   String?
  emoji  String?
  expiresAt    DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}


model Friendship {
  id        BigInt           @id
  user1     User             @relation("UserFriend1", fields: [user1Id], references: [id])
  user1Id   BigInt
  user2     User             @relation("UserFriend2", fields: [user2Id], references: [id])
  user2Id   BigInt
  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
}

model Conversation {
  id        BigInt   @id
  isGroup   Boolean  @default(false)
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages     Message[]
  participants ConversationUser[]

  @@index([isGroup])
}

model ConversationUser {
  id                BigInt       @id
  user              User         @relation(fields: [userId], references: [id])
  userId            BigInt
  conversation      Conversation @relation(fields: [conversationId], references: [id])
  conversationId    BigInt
  joinedAt          DateTime     @default(now())
  nickname          String?
  // last_read points to last message id read by this user in this convo (for unread count)
  lastReadMessageId BigInt?

  @@unique([userId, conversationId])
  @@index([conversationId])
  @@index([userId])
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
  REPLY
  VOICE
}

model Message {
  id             BigInt        @id @default(autoincrement())
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId BigInt?
  sender         User          @relation("SentMessages", fields: [senderId], references: [id])
  senderId       BigInt
  receiver       User?         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId     BigInt?

  // محتوى الرسالة الأساسي
  content String?
  type    MessageType @default(TEXT)

  // mentions system
  mentionEveryone Boolean @default(false)
  mentions        Json? // array of Mention objects
  mentionRoles    Json? // array of MentionRole objects

  // metadata
  pinned      Boolean @default(false)
  reactions   Json? // array of Reaction objects
  attachments Json? // array of Attachment objects

  // reply system
  replyTo        BigInt?
  repliedMessage Message?  @relation("MessageReplies", fields: [replyTo], references: [id])
  replies        Message[] @relation("MessageReplies")

  // timestamps
  editedAt  DateTime?
  deletedAt DateTime?
  createdAt DateTime  @default(now())

  receipts MessageReceipt[]

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}

model MessageReceipt {
  id        BigInt   @id
  message   Message  @relation(fields: [messageId], references: [id])
  messageId BigInt
  user      User     @relation(fields: [userId], references: [id])
  userId    BigInt
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
  @@index([userId])
}

model UserRelation {
  id        BigInt       @id
  source    User         @relation("SourceUser", fields: [sourceId], references: [id])
  sourceId  BigInt
  target    User         @relation("TargetUser", fields: [targetId], references: [id])
  targetId  BigInt
  type      RelationType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  note      String?

  @@unique([sourceId, targetId, type])
  @@index([sourceId])
  @@index([targetId])
}

enum RelationType {
  BLOCKED
  IGNORED
  MUTED
}

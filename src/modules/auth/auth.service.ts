import {
  Injectable,
  UnauthorizedException,
  ConflictException,
} from '@nestjs/common';
import { PresenceRepository, UserRepository, UserStatusRecordRepository } from 'src/common/database/repositories';
import { RegisterDto, LoginDto } from './dto/auth.dto';
import { JwtHelper, verifyHash } from '../../common/Global/security';
import { Prisma, UserStatus } from '@prisma/client';
import { plainToInstance } from 'class-transformer';
import { AuthResponseDto, LoginResponseDto } from '../../common/dto/auth-response.dto';
import { ApiResponse } from 'src/common/shared/types';
import { RESPONSE_MESSAGES } from 'src/common/shared/response-messages';
import { success, fail } from 'src/common/utils/response.util';
import { UserDto } from 'src/common/dto';

@Injectable()
export class AuthService {
  constructor(
    private readonly userRepository: UserRepository,
    private readonly jwtHelper: JwtHelper,
    private readonly userStatusRecordRepository: UserStatusRecordRepository,
    private readonly presenceRepository: PresenceRepository,
  ) {}

  async register(registerDto: RegisterDto) : Promise<ApiResponse<AuthResponseDto>> {
    // Check if user already exists
    const existingUser = await this.userRepository.findByEmail(
      registerDto.email,
    );
    if (existingUser) {
      throw new ConflictException('User with this email already exists');
    }

    // Check if username is taken
    const existingUsername = await this.userRepository.findByUsername(
      registerDto.username,
    );
    if (existingUsername) {
      throw new ConflictException('Username is already taken');
    }

    // Create user (password will be hashed by middleware, id will be generated by middleware)
    const user = await this.userRepository.create({
      ...registerDto,
    } as Omit<Prisma.UserUncheckedCreateInput, 'id'>);
    await this.userStatusRecordRepository.createStatusRecord({
      userId: user.id,
    });
    await this.presenceRepository.createPresence(user.id);
    // Generate JWT tokens
    const accessToken = this.jwtHelper.generateToken({
      sub: user.id.toString(),
      type: 'access',
    });
    const refreshToken = this.jwtHelper.generateToken({
      sub: user.id.toString(),
      type: 'refresh',
    });

    return success(
      RESPONSE_MESSAGES.AUTH.USER_CREATED,
      plainToInstance(
        AuthResponseDto,
        {
          user: plainToInstance(UserDto, user, { excludeExtraneousValues: true }),
          accessToken,
          refreshToken,
        },
        { excludeExtraneousValues: true },
      ),
    );
  }

  async login(loginDto: LoginDto): Promise<ApiResponse<LoginResponseDto>> {
    // Find user by email
    const user = await this.userRepository.findByEmail(loginDto.email);
    if (!user) {
      return fail<LoginResponseDto>(RESPONSE_MESSAGES.AUTH.INVALID_CREDENTIALS);
    }

    // Verify password (you'll need to implement password verification)
    const isPasswordValid = await verifyHash(loginDto.password, user.password);
    if (!isPasswordValid) {
      return fail<LoginResponseDto>(RESPONSE_MESSAGES.AUTH.INVALID_CREDENTIALS);
    }
    // Generate JWT tokens
    const accessToken = this.jwtHelper.generateToken({
      sub: user.id.toString(),
      type: 'access',
    });
    const refreshToken = this.jwtHelper.generateToken({
      sub: user.id.toString(),
      type: 'refresh',
    });

    return success(
      RESPONSE_MESSAGES.AUTH.LOGIN_SUCCESS,
      plainToInstance(
        LoginResponseDto,
        { accessToken, refreshToken },
        { excludeExtraneousValues: true },
      ),
    );
  }
}
